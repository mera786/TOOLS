What is Source code management tool?

- Version Control: It allows teams of developers to keep track of changes to their codebase.

- Collaboration: It enables multiple developers to work together on the same project.

- Continuous Integration/Continuous Deployment (CI/CD)
It integrates with various CI/CD tools (like GitHub Actions, Jenkins, and Travis CI) to automate testing, building, and deploying your code.

Example:

1. Git hub
2. Bit Bucket
3. Clear case
4. SVN

________________________
Git Hub and git 
________________________

1. Create git hub account
2. Install git in local system
3. Configure name & email using following commands (One time configuration)

git config --global user.name ""
git config --gloabl user.email ""

Let's go over the explanation of Git Architecture in detail:

1) Working Tree
The Working Tree (also called the Working Directory or Workspace) is where all the files for your project are stored on your local machine.

2) Staging Area
The Staging Area (also called the Index) is where files are prepared before being committed to the repository.
When you make changes in your working directory and want to save them to the local repository, you first add them to the staging area using the git add command.
Once files are in the staging area, they are ready to be committed. The staging area holds a snapshot of your changes and prepares them for the next commit.
In short, it's a "pre-commit" area where you gather all the changes you want to be part of the next commit.

3) Local Repository
The Local Repository is the place where Git stores all your project’s history. It's stored on your local machine.
When you commit changes (git commit), the changes are recorded into your local repository.
This local repository contains a .git folder that holds all of the project’s version history, configuration settings, and other important Git-related data.
Commits in the local repository allow you to revert to previous versions, branch out, and compare changes locally without affecting the central repository.

4) Central Repository
The Central Repository (also called the Remote Repository) is usually hosted on a platform like GitHub, GitLab, or Bitbucket.
It is shared by multiple contributors and serves as the main repository that everyone pulls from and pushes to.
Developers clone this repository to create their local copies and regularly push their commits to share their changes, as well as pull others' changes from the central repository.
This central repository is accessible to all team members.




##############
Git Commands
#############

1. git init
________________
Purpose: Initializes a new Git repository in the current directory.

Usage: You run this command in a project folder to convert it into a Git repository. It creates a .git directory where Git stores all its configuration files and version history.

Example:
git init
________________________________________________________________________________________________________________________
2. git status
_______________
Purpose: Shows the current status of the working directory and staging area.
Usage: This command is used to check whether there are any modified, added, or deleted files in the working directory that need to be staged or committed.

git status

It will show if files are untracked, modified, or staged.

________________________________________________________________________________________________________________________

3. git add
_______________

Purpose: Adds files or changes to the staging area (index) in preparation for a commit.
Usage: You specify the file(s) to add or use a wildcard (e.g., git add . to add all files).


git add test.txt
git add .  # To add all changes
________________________________________________________________________________________________________________________

4 git commit
_______________
Purpose: Commits the staged files to the local repository, saving your changes along with a commit message.
Usage: This records your staged changes and adds them to the local repository’s history.

git commit -m "Commit message describing changes"
________________________________________________________________________________________________________________________

5) git push
_______________
Purpose: Pushes the committed changes from the local repository to the central repository (remote repo like GitHub).
Usage: After committing locally, use this to share your changes with others by sending them to the central repository.

git push origin main  # Push changes to the "main" branch

**Note**: 

Git will:

-> Create a remote named origin

-> Create a local branch named testing (instead of main)

-> Set up tracking: testing → origin/testing

-> that's the reason to use : git push origin testing  # Push changes to the "testing" branch

-> to check remote: git remote -v

________________________________________________________________________________________________________________________

6) git restore
_______________
Purpose: Used to undo changes in the working directory and the staging area but at least one commit needed.
Usage:
(1) If a file is unstaged, git restore will discard local changes made to that file.
Examples:

git restore test.txt

(2) If a file is staged, git restore --staged will unstage the file but keep the changes in the working directory.
Unstage a staged file (without discarding changes):

Examples:
git restore --staged test.txt


EXTRA:-

| Your goal                           | Best command           | Needs commit?  |
| ----------------------------------- | ---------------------- | -------------  |
| Unstage a file                      | `git reset <file>`     | ❌ No          |
| Discard local (uncommitted) changes | `git restore <file>`   | ✅ Yes         |
| Unstage using `restore`             | `git restore --staged` | ✅ Yes         |
| Revert committed changes            | `git revert <commit>`  | ✅ Yes         |


________________________________________________________________________________________________________________________
7) git log
__________
Purpose: Displays the commit history, including commit IDs, author information, dates, and commit messages.
Usage: This is useful to view the history of changes made to the project.

git log

To view a simpler summary, you can add options:

git log --oneline

________________________________________________________________________________________________________________________
8) git rm
_______________
Purpose: Removes a file from both the working directory and the staging area, and it schedules the deletion for the next commit.
Usage: If you want to delete a file, this command removes it and stages the change for the commit.

git rm file_name.txt
git commit -m "Remove test.txt"
git push origin main
___________________________________________________________________________________________________________________________

9) git clone
_______________
Purpose: Downloads a copy of an existing Git repository (usually from a remote central repository) to your local system.
Usage: This command is typically used when you want to start working on an existing project and need a copy of the central repository on your machine.

git clone https://github.com/username/repository.git
___________________________________________________________________________________________________________________________

10) git pull
_______________
Purpose: Fetches and merges changes from the central repository to your local repository.
Usage: Use this to keep your local repository up to date with changes made by other collaborators. However, conflicts may arise if your local changes clash with those on the central repo.

git pull origin main

Note: Conflicts occur when there are changes in the same part of a file in both your local and the central repository. You’ll need to manually resolve these conflicts.
_____________________________________________________________________________________________________________________________

11) git gui
_______________
Purpose: Opens the Git GUI tool, which is a graphical user interface (GUI) for interacting with Git repositories.
Usage: Some users prefer to use a GUI rather than the command line to manage their repositories. The git gui tool provides a more visual interface for Git operations like commit, branch, and status management.

Example: git gui

This will open a graphical tool where you can perform many of the Git operations like staging, committing, and viewing the commit history without needing to use
______________________________________________________________________________________________________________________


git pull versus git fetch
___________________________
a. git pull

-> Downloads changes from the remote repository (e.g., GitHub, GitLab) to the local repository.
-> Automatically merges the fetched changes into your current working branch.
-> May cause merge conflicts if there are conflicting change

Example:
git pull
_______________

b. git fetch
_______________
-> Downloads the latest changes from the remote repository but does not merge them into your working branch.
-> This is a safe operation because it allows you to review the changes before merging.
-> The fetched changes are stored in origin/<branch>, and you can manually merge them when ready.

Example:
git fetch
git merge

______________________________________________________________________________________________________________________
12. git stash:
_______________
-> git stash is a command used in Git to temporarily save changes that are not yet committed to work on something else without losing your modifications.
-> when you run git stash, all your modified but unstaged or staged changes are temporarily stored in a hidden area

example: 
git stash - to store changes in temp area
git stash apply - to get the changes from temp area back




13. git cherrypic:
__________________
-> git cherry-pick is used to apply a specific commit from one branch to another without merging the entire branch.

Interview Question?

You have done today 5 commits, but you want to merge only 3rd commit to particular branch, how will you do?
Answer: git cherrypic

Note: git merge will merge all the commit to a particular branch

_______________

BRANCHES:=
#################################

* Instead of saying Merge the branch in cmpny ppl say do PR

* How Much Branches was there in your projects: 
- features (for adding new features)
- R & D ( for adding some extra thing to make better application)
- Hot fix ( serious problem)
- bug fix ( for fixing bugs)
.... etc

* How many branches you have created ( at a given time )
1 ,2 or 3
* tell me procedure to fix a bug ?
firstly from bug fix branch , i created one more branch (sub branch) like bug-fix-jira-3456-login-error and work in this branch , once after fixed bug
then i have done PR (pull request) 

(1) To see local branches (on your machine):

 git branch

(2)  To see remote branches (on the remote like GitHub, GitLab, etc.):
 
 git branch -r

(3)  To see all branches (both local and remote):

 git branch -a

(4) To switch to an existing branch:
 
 git switch <branch-name>    / git checkout <branch-name>

(5) To create a new branch and switch to it:

 git switch -c <new-branch-name>  / git checkout -b <new-branch-name>

(6) to create new branch through git :
 
 git branch <branch-name>    / git branch bug-fix-jira-3456-login-error
(7)  by your self created branch , git push will not work instead use this one : git push --set-upstream origin bug-fix-jira-3456-login-error

PULL CONFLICT := when two developers are working on same functionality and there code are not matching on a particular line of code then it's occurs 
                for that while doing pull we need to fix it manually.

* Note:- write same line different code on git hub code and different line in local then 
(8) git add .
(9) git commit -m "first commit"
(10) git pull :- you will see conflict error so manually fix and then repeat above 3 commands then
(11) git push

* How did you resolve conflict ?
sir i connected to the developers try to ask him what is code all about then we arrive a conculusion is there any sequence to in which code need to be keept if sequence
need to be kept accordingly we arrange the code .

* Note: if you want to set your origin then : git remote set-url origin https://github.com/mera786/test.git

(12) Undo the commit from remote repository: git revert <commit-id>  / git revert aac5cba

(13) Undo the commit from local repository : 
 soft reset : it will only undo from stagging to unstage but file will be there 
git reset --soft HEAD~1 (for recent commit)

hard reset : it will undo from stagging and also removed file.
git reset --hard HEAD~3

* What is Fork ?
taking another github code in  your github repository.

