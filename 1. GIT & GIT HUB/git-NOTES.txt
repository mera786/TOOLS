(1). What is Source code management tool?
################################################

- Version Control: It allows teams of developers to keep track of changes to their codebase.

- Collaboration: It enables multiple developers to work together on the same project.

- Continuous Integration/Continuous Deployment (CI/CD)
It integrates with various CI/CD tools (like GitHub Actions, Jenkins, and Travis CI) to automate testing, building, and deploying your code.

Example:

-  Git hub
-  Bit Bucket
-  Clear case
-  SVN


(2). What is Git, and how is it different from GitHub?
#######################################################
Git :
----
- Git is a distributed version control system (DVCS).
- It helps you track changes in your code, go back to previous versions, and collaborate with others.
- Example: You can save different versions of your project and switch between them easily.
Github :
--------
- GitHub is a cloud-based platform that hosts Git repositories.
- It allows you to store your code online, collaborate with teams, and manage projects.
- Think of it as social media for code (with repos, stars, pull requests).

(3) Explain the difference between Git and other version control systems like SVN.?
#####################################################################################
SVN (Centralized VCS):
-----------------------
- Has a central server that stores the complete repository.
- Developers check out files, make changes, then commit back to the central server.
- Without server access → you can’t commit.
Git (Distributed VCS):
----------------------
- Every developer has a full copy of the repository, including complete history.
- You can commit locally without internet.
- Later you push to a remote server (like GitHub) for collaboration.

Note: Offline Work
- SVN: Needs internet/server connection for most actions.
- Git: Works offline; you only need internet for push/pull.

________________________
Git Hub and git 
________________________

-  Create git hub account
-  Install git in local system
-  Configure name & email using following commands (One time configuration)

git config --global user.name ""
git config --gloabl user.email ""

(4) Let's go over the explanation of Git Architecture in detail:
#######################################################################

a) Working Tree
The Working Tree (also called the Working Directory or Workspace) is where all the files for your project are stored on your local machine.

b) Staging Area
The Staging Area (also called the Index) is where files are prepared before being committed to the repository.
When you make changes in your working directory and want to save them to the local repository, you first add them to the staging area using the git add command.
Once files are in the staging area, they are ready to be committed. The staging area holds a snapshot of your changes and prepares them for the next commit.
In short, it's a "pre-commit" area where you gather all the changes you want to be part of the next commit.

c) Local Repository
The Local Repository is the place where Git stores all your project’s history. It's stored on your local machine.
When you commit changes (git commit), the changes are recorded into your local repository.
This local repository contains a .git folder that holds all of the project’s version history, configuration settings, and other important Git-related data.
Commits in the local repository allow you to revert to previous versions, branch out, and compare changes locally without affecting the central repository.

d) Central Repository
The Central Repository (also called the Remote Repository) is usually hosted on a platform like GitHub, GitLab, or Bitbucket.
It is shared by multiple contributors and serves as the main repository that everyone pulls from and pushes to.
Developers clone this repository to create their local copies and regularly push their commits to share their changes, as well as pull others' changes from the central repository.
This central repository is accessible to all team members.


(5) What is the difference between git clone, git pull, and git fetch?
#######################################################################
Git clone :
------------
- Purpose: Downloads a copy of an existing Git repository (usually from a remote central repository) to your local system.
- Usage: This command is typically used when you want to start working on an existing project and need a copy of the central repository on your machine.

Git pull :
-----------
- Purpose: Fetches and merges changes from the central repository to your local repository.
- Usage: Use this to keep your local repository up to date with changes made by other collaborators. However, conflicts may arise if your local changes clash with those on the central repo.
- Note: Conflicts occur when there are changes in the same part of a file in both your local and the central repository. You’ll need to manually resolve these conflicts.

Git fetch :
------------
- Downloads the latest changes from the remote repository but does not merge them into your working branch.
- This is a safe operation because it allows you to review the changes before merging.
- The fetched changes are stored in origin/<branch>, and you can manually merge them when ready.

(6) What is the difference between git merge and git rebase?
##############################################################
Git Merge :
------------
- Combines changes from one branch into another.
- Creates an extra commit (merge commit).
- Preserves the history of both branches as they are.
Git Rebase :
-------------
- Moves (re-applies) commits of one branch on top of another branch.
- Rewrites history (no merge commit).
- Makes the commit history linear and clean.

Note: 
🔹 When to Use?
Use Merge → When working in teams, and you want to keep the true history.
Use Rebase → When you want a clean, linear history (often before pushing code, or in personal branches).


(7) What is the difference between git checkout and git switch?
################################################################
git checkout :
----------------
- A multi-purpose command (old way).
- Can do two different things:
   a. Switch between branches.
   b. Restore files to a previous state.
ex:-
# Switch branch
git checkout feature
# Restore file from last commit
git checkout -- index.html

git switch :
- Dedicated only for switching branches (not restoring files)/create branches.
ex:-
# Switch to an existing branch
git switch feature
# Create and switch to a new branch
git switch -c new-feature

(8) Explain git reset vs git revert vs git checkout. ?
##########################################################
git checkout :
--------------
- switch branches or restore working tree.
git reset :
------------
-  The purpose of git reset is to take the current branch and reset it to point somewhere else.
- piche wala commit pe chla jata hai
- there are different modes of git reset :
        a. --soft := moves head but does't touch the staging area or the working tree.
        b. --mixed := moves head and updates the staging area but not the working tree.
        c. --hard := moves head and adjust your staging area and working tree to the new head, throwing away everything.
Note :- head ? => HEAD in Git is a pointer that shows the current branch or commit you are working on.
  ex- Jab aap git commit karte ho → naya page add hota hai aur HEAD automatically us page par move ho jata hai. Jab aap checkout karte ho → HEAD us branch par point            karne lagta hai.
git revert :
--------------
- git rever creates a new commit with the changes that are rolled back.
- piche wala commit shi hai usse leke neya commit bna deta hai.
- there are different flags/options git revert :
      a. --no-commit
      b. --edit
      c. --no-edit etc.

(9) What is the difference between a commit, branch, tag, and HEAD in Git?
###########################################################################

🔹 Commit
------------
- A snapshot of your project at a point in time.
- Think of it like saving a file version with a unique ID (SHA hash).
- Example: "This commit saved the code after fixing a bug."
🔹 Branch
------------
- A pointer (or label) to a series of commits.
- The default branch is usually main or master.
- Used to develop features separately without disturbing the main code.
- Example: feature/login branch for login functionality.
🔹 Tag
--------
- A pointer to a specific commit (usually a release point).
- Unlike branches, tags don’t move — they’re fixed.
- Commonly used for marking versions like v1.0, v2.0.
🔹 HEAD
----------
- A special pointer that tells where you currently are in the repo.
- Usually, it points to the latest commit of the current branch.
- Example: If you’re on branch main, HEAD points to the tip of main.

(10) What is the difference between git stash and git stash pop?
##################################################################
git stash :
-----------
- Saves your uncommitted changes (both staged + unstaged) into a hidden stack.
- Cleans your working directory so you can switch branches or do other work safely.
- Changes are still stored in Git’s stash memory, but not applied.
git stash pop :
----------------
- Restores (applies) the most recent stashed changes back to your working directory.
- After applying, it removes that stash from the stash list.

(11) What is a detached HEAD state in Git?
##############################################
Normally, HEAD points to the latest commit of a branch (e.g., main, dev).
But sometimes you checkout a commit directly (instead of a branch). Then HEAD points to a commit, not a branch.
This is called detached HEAD state.
ex- git checkout a1b2c3d(commit hash)
Note:- If you make commits in detached HEAD and want to keep them: git checkout -b new-branch-name
- Normal HEAD → Points to a branch (which points to a commit).
- Detached HEAD → Points directly to a commit, not a branch.

(12) How do you check the history of commits for a file in Git?
##################################################################
- git log -- file.txt  :  See commits that changed the file.
- git log --oneline -- <filename> : Show commit history in one line
- git log -p -- file.txt :  See changes inside the file.
- git blame file.txt :  See which commit/author last modified each line.

(13) How do you create a new branch and switch to it?
#########################################################
creating a new branch and switching to it can be done in two ways:
a. Using git checkout (old way) :
    ex- git checkout -b new-branch-name  , here -b → create a new branch.
b. Using git switch (recommended modern way) :
    ex- git switch -c new-branch-name   , here -c → create a new branch.


(14) What is the difference between a local branch and a remote-tracking branch?
###################################################################################
Local Branch :
---------------
- A branch that exists on your local machine.
- You can commit, switch, and modify it freely.
- Example: main, feature/login on your computer.
- Commands:
    git branch          # lists all local branches
    git checkout main   # switch to a local branch
    git commit -m "..." # commit on a local branch
Remote-Tracking Branch :
-------------------------
- A branch that tracks a branch on a remote repository (like GitHub).
- You cannot commit directly to it locally.
- Used to see the latest state of the remote branch.
- Naming: origin/main, origin/feature/login
- Commands:
     git fetch           # update remote-tracking branches
     git merge origin/main   # merge remote changes into local

(15) How do you delete a branch locally and remotely?
########################################################
| Action               | Command                                | Notes                      |
| -------------------- | -------------------------------------- | -------------------------- |
| Delete local branch  | `git branch -d branch-name`            | Safe delete if merged      |
| Force delete local   | `git branch -D branch-name`            | Deletes even if not merged |
| Delete remote branch | `git push origin --delete branch-name` | Removes branch from remote |


(16) What is a merge conflict and How do you resolve merge conflicts in Git?
###############################################################################

merge conflict : 
-----------------
- A merge conflict happens when Git cannot automatically combine changes from two branches because the same part of a file was changed differently.

Steps to Resolve Merge Conflicts :
----------------------------------
STEP-1
*******
Merge branches : like, 
           git checkout main
           git merge feature
 Note:- If there are conflicts, Git will show.
STEP-2
*******
Open conflicted files : Look for conflict markers in the file
STEP-3
*******
Decide which changes to keep : connected to the developers if other developers were involved, try to ask him what is code all about then find the conculusion is there any sequence to ,in which code need to be keept if sequence need to be kept accordingly we arrange the code.
STEP-4
*******
Mark file as resolved : like, git add file.txt
STEP-5
*******
Complete the merge : git commit


(17) What are Git workflows (Git Flow, GitHub Flow, trunk-based development)?
##############################################################################
Git Workflows : 
---------------
Workflows define how teams use branches to collaborate in Git.

The three most popular ones are:
--------------------------------
 a. Git Flow :
***************
- Best for: Large projects with planned releases.
- Branching model:
     - main (or master) → production-ready code
     - develop → integration branch (where features merge before release)
     - feature/* → for new features
     - release/* → for preparing a release
     - hotfix/* → for urgent fixes in production
b. GitHub Flow :
*****************
- Best for: Continuous deployment, small-to-medium teams.
- Branching model:
      - main → always deployable
      - Create a short-lived feature branch (feature/login)
      - Open a Pull Request (PR) → get reviewed → merge back into main
c. Trunk-Based Development :
******************************
- Best for: Agile, DevOps, CI/CD teams.
- Branching model:
        - Developers commit directly to main (trunk) or very short-lived branches.
        - Frequent small commits → continuously integrated.



(18) What is Fork ? and How do you fork a repository and create a pull request in GitHub?
#############################################################################################
Fork :
--------
- Forking means creating your own copy of someone else’s GitHub repository.

after forking create a pull request in GitHub :
------------------------------------------------
 STEP-1 :
   - Go to the repo on GitHub.
   - Click Fork (top-right corner).
   - This makes a copy of the repo in your GitHub account.
STEP-2 :
    - Clone Your Fork Locally
STEP-3 :
    - Create a another Branch from it. (good practice)
STEP-4 :
    - Make Changes & Commit
STEP-5 :
    - Push Branch to Your Fork
STEP-6 :
     - Create a Pull Request (PR) :
                 - Go to your fork on GitHub.
                 - Click Compare & pull request.
                                             Choose:
                                                 - Base repository → the original repo (where you want to contribute).
                                                 - Head repository → your fork & branch.
                                                 - Add description and submit the Pull Request.

NOTE :- IN SHORT     := Fork → Clone → Branch → Commit → Push → Pull Request  
           

(19) What is the difference between fast-forward and three-way merge in Git?
#################################################################################
Fast-Forward Merge :
---------------------
 - Happens when the branch you are merging is directly ahead of the branch you’re on.
 - No new commits exist on the target branch since branching.
 - Git just moves the branch pointer forward — no extra merge commit is created.
 - Example : 
           main:   A---B
            feature:    \
                         C---D
   NOTE : Merging feature into main (no new commits on main) → just moves main to D.

Three-Way Merge :
-------------------
- Happens when both branches have new commits after branching.
- Situation Before Merge :
main:    A---B---E   (HEAD points here)
feature:    \
             C---D

NOTE :  Git looks at three commits:
                           - Common ancestor → B
                           - Head commit → “Head commit of current branch (E)
                           - Head commit of merging branch → D (feature)

* Git combines changes from B → E and B → D. It then creates a new commit M on the branch you merged into (here: main).
- Situation After Merge :
main:    A---B---E
             \     \
              C---D-M   (M is created on main)


(20) How do you undo the last commit (but keep the changes)?
#############################################################
- If you want to remove the commit but keep all the file changes in your working directory :
    -  git reset --soft HEAD~1

(21) How do you undo the last commit (and discard the changes)?
##################################################################
- If you want to remove the last commit completely and also throw away all its changes :
    - git reset --hard HEAD~1

(22) How do you stage only part of a file in Git?
####################################################
- Using git add -p (patch mode) : 
   ex - git add -p file.txt  when run now Git shows each change (called a hunk) in file.txt.
                                                                                  For each hunk, you choose:
                                                                                                    - y → stage this hunk
                                                                                                    - n → don’t stage
                                                                                                    - s → split into smaller hunks
                                                                                                    - q → quit

- Using Interactive Mode :
    ex- git add -i



(23) How do you see the difference between two commits?
###########################################################
git diff <commit1> <commit2>  : Shows the line-by-line changes between the snapshots.
git diff --name-only <commit1> <commit2> : See names of changed files only


(24) How do you squash multiple commits into one?
####################################################
- Interactive Rebase (most common) :  
       like, git rebase -i HEAD~N  here Replace N with how many commits you want to squash.
- now 
An editor opens showing something like:
pick a1b2c3 First commit
pick d4e5f6 Second commit
pick 789abc Third commit
Change the word pick to squash (or s) for the commits you want to merge into the first:
pick a1b2c3 First commit
squash d4e5f6 Second commit
squash 789abc Third commit
- Git will then let you edit the commit message → combine or rewrite as needed.
- Save and exit → Git creates one single commit.

(25) How do you cherry-pick a commit from another branch?
###########################################################
cherry-pick : 
-------------
Cherry-pick in Git means applying a specific commit from one branch into another branch, without merging the whole branch.
   commands : git cherry-pick <commit-hash>
Example :
Suppose you are on main branch:  git checkout main
You see a useful commit (abc123) in feature branch that you want in main: git log feature
Apply that commit: git cherry-pick abc123
Note:- Now main has that commit, even without merging the entire feature branch.

(26) How do you set up .gitignore and what is it used for?
#############################################################
gitignore :
---------------
-  .gitignore is a plain text file in your Git repository.
- It tells Git which files/folders to ignore (not track).
- Useful for things like:
                - build artifacts (/target, /dist)
                - IDE files (.idea/, .vscode/)
                - OS files (Thumbs.db, .DS_Store)
                - secrets (*.env, *.key)
How to Set It Up :
-------------------
- Create a file named .gitignore in your repository root:  touch .gitignore
- Add patterns of files/folders you want Git to ignore. Example :
# Ignore build directory
/target/

# Ignore log files
*.log

# Ignore environment files
.env

# Ignore IDE configs
.idea/
*.iml
- Save it and commit 
- Important Notes  :
                 - .gitignore only affects untracked files.
                 - If you already tracked a file, Git won’t ignore it automatically. To fix: git rm --cached filename



(27) What is the difference between git log and git reflog?
############################################################
git log :
-----------
- Shows the commit history of your repository.
- Only displays commits that are part of the current branch’s history.
- Good for seeing what has been committed to the project.
- Example: git log --oneline
git reflog :
---------------
- Shows the history of HEAD movements (where your HEAD and branches pointed to).
- Includes commits that may not be visible in git log (like after reset, rebase, checkout, etc.).
- Useful for recovering lost commits.
- Example: git reflog

(28) How do you check who wrote a particular line of code in a file? (git blame)?
###################################################################################
This is where git blame comes in.
command : git blame <filename>
Shows who last modified each line in a file, along with:
                                                      - commit hash
                                                      - author
                                                      - timestamp
                                                      - the actual line of code
                                                                             Example : git blame UserService.java


(29) How Much Branches was there in your projects?
-  How Much Branches was there in your projects: 
                - features (for adding new features)
                - R & D ( for adding some extra thing to make better application)
                - Hot fix ( serious problem)
                - bug fix ( for fixing bugs).... etc

(30) How many branches you have created ( at a given time )?
 - How many branches you have created ( at a given time )
       1 ,2 or 3
- tell me procedure to fix a bug ?
firstly from bug fix branch , i created one more branch (sub branch) like bug-fix-jira-3456-login-error and work in this branch , once after fixed bug
then i have done PR (pull request) 



###################################################################################################################################################################
                                                                                 Git Commands
####################################################################################################################################################################

1. git init
________________
Purpose: Initializes a new Git repository in the current directory.

Usage: You run this command in a project folder to convert it into a Git repository. It creates a .git directory where Git stores all its configuration files and version history.

Example:
git init
________________________________________________________________________________________________________________________
2. git status
_______________
Purpose: Shows the current status of the working directory and staging area.
Usage: This command is used to check whether there are any modified, added, or deleted files in the working directory that need to be staged or committed.

git status

It will show if files are untracked, modified, or staged.

________________________________________________________________________________________________________________________

3. git add
_______________

Purpose: Adds files or changes to the staging area (index) in preparation for a commit.
Usage: You specify the file(s) to add or use a wildcard (e.g., git add . to add all files).


git add test.txt
git add .  # To add all changes
________________________________________________________________________________________________________________________

4 git commit
_______________
Purpose: Commits the staged files to the local repository, saving your changes along with a commit message.
Usage: This records your staged changes and adds them to the local repository’s history.

git commit -m "Commit message describing changes"
________________________________________________________________________________________________________________________

5) git push
_______________
Purpose: Pushes the committed changes from the local repository to the central repository (remote repo like GitHub).
Usage: After committing locally, use this to share your changes with others by sending them to the central repository.

git push origin main  # Push changes to the "main" branch

**Note**: 

Git will:

-> Create a remote named origin

-> Create a local branch named testing (instead of main)

-> Set up tracking: testing → origin/testing

-> that's the reason to use : git push origin testing  # Push changes to the "testing" branch

-> to check remote: git remote -v

Note: before commiting also we can see branch if not showing git branch then use, git symbolic-ref --short HEAD


________________________________________________________________________________________________________________________

6) git restore
_______________
Purpose: Used to undo changes in the working directory and the staging area but at least one commit needed.
Usage:
(1) If a file is unstaged, git restore will discard local changes made to that file.
Examples:

git restore test.txt

(2) If a file is staged, git restore --staged will unstage the file but keep the changes in the working directory.
Unstage a staged file (without discarding changes):

Examples:
git restore --staged test.txt


EXTRA:-

| Your goal                           | Best command           | Needs commit?  |
| ----------------------------------- | ---------------------- | -------------  |
| Unstage a file                      | `git reset <file>`     | ❌ No          |
| Discard local (uncommitted) changes | `git restore <file>`   | ✅ Yes         |
| Unstage using `restore`             | `git restore --staged` | ✅ Yes         |
| Revert committed changes            | `git revert <commit>`  | ✅ Yes         |


________________________________________________________________________________________________________________________
7) git log
__________
Purpose: Displays the commit history, including commit IDs, author information, dates, and commit messages.
Usage: This is useful to view the history of changes made to the project.

git log

To view a simpler summary, you can add options:

git log --oneline

________________________________________________________________________________________________________________________
8) git rm
_______________
Purpose: Removes a file from both the working directory and the staging area, and it schedules the deletion for the next commit.
Usage: If you want to delete a file, this command removes it and stages the change for the commit.

git rm file_name.txt
git commit -m "Remove test.txt"
git push origin main
___________________________________________________________________________________________________________________________

9) git clone
_______________
Purpose: Downloads a copy of an existing Git repository (usually from a remote central repository) to your local system.
Usage: This command is typically used when you want to start working on an existing project and need a copy of the central repository on your machine.

git clone https://github.com/username/repository.git
___________________________________________________________________________________________________________________________

10) git pull
_______________
Purpose: Fetches and merges changes from the central repository to your local repository.
Usage: Use this to keep your local repository up to date with changes made by other collaborators. However, conflicts may arise if your local changes clash with those on the central repo.

git pull origin main

Note: Conflicts occur when there are changes in the same part of a file in both your local and the central repository. You’ll need to manually resolve these conflicts.
_____________________________________________________________________________________________________________________________

11) git gui
_______________
Purpose: Opens the Git GUI tool, which is a graphical user interface (GUI) for interacting with Git repositories.
Usage: Some users prefer to use a GUI rather than the command line to manage their repositories. The git gui tool provides a more visual interface for Git operations like commit, branch, and status management.

Example: git gui

This will open a graphical tool where you can perform many of the Git operations like staging, committing, and viewing the commit history without needing to use
______________________________________________________________________________________________________________________


git pull versus git fetch
___________________________
a. git pull

-> Downloads changes from the remote repository (e.g., GitHub, GitLab) to the local repository.
-> Automatically merges the fetched changes into your current working branch.
-> May cause merge conflicts if there are conflicting change

Example:
git pull
_______________

b. git fetch
_______________
-> Downloads the latest changes from the remote repository but does not merge them into your working branch.
-> This is a safe operation because it allows you to review the changes before merging.
-> The fetched changes are stored in origin/<branch>, and you can manually merge them when ready.

Example:
git fetch
git merge

______________________________________________________________________________________________________________________
12. git stash:
_______________
-> git stash is a command used in Git to temporarily save changes that are not yet committed to work on something else without losing your modifications. but make sure at least once commit has been done.
-> when you run git stash, all your modified but unstaged or staged changes are temporarily stored in a hidden area

example: 
| Command                      | Description                                                                          |
| ---------------------------- | ------------------------------------------------------------------------------------ |
| `git stash push a.txt`       | ✅ Stashes **only `a.txt`**, if it's a tracked or staged file                         |
| `git stash push a.txt b.txt` | ✅ Stashes **only those specific files**                                              |
| `git stash`                  | ✅ Stashes **all modified tracked** and **staged files**, but **not untracked** files |
| `git stash -u`               | ✅ Stashes tracked **+ untracked** files                                              |
| `git stash pop`              | ✅ Applies the **most recent stash** and **removes it** from the stash list           |
| `git stash list`             | ✅ Lists **all saved stashes**                                                        |
| `git stash apply`            | ✅ Applies the most recent stash **without deleting** it from the list                |




13. git cherrypic:
__________________
-> git cherry-pick is used to apply a specific commit from one branch to another without merging the entire branch.

Interview Question?

You have done today 5 commits, but you want to merge only 3rd commit to particular branch, how will you do?
Answer: git cherrypic

Note: git merge will merge all the commit to a particular branch

-------------
PRACTICAL :
------------
Step 1: Create a new repo:
-> git init
Step 2: Create initial commit on main:
-> git add .
-> git commit -m "initial commit"
Step 3: Create and switch to a new branch:
-> git checkout -b feature
Step 4: Make 5 commits :

echo "first change" >> file.txt
git add .
git commit -m "commit 1"

echo "second change" >> file.txt
git add .
git commit -m "commit 2"

echo "third change" >> file.txt
git add .
git commit -m "commit 3"

echo "fourth change" >> file.txt
git add .
git commit -m "commit 4"

echo "fifth change" >> file.txt
git add .
git commit -m "commit 5"

Step 5: View the commit history and copy the hash of commit 3:
-> git log --oneline
Step 6: Switch back to main :
-> git checkout main
Step 7: Cherry-pick the 3rd commit only :
-> git cherry-pick c1d2345
Step 8 : You can verify :
-> git log --oneline
-> cat file.txt


_______________

BRANCHES:=
#################################

* Instead of saying Merge the branch in cmpny ppl say do PR

* How Much Branches was there in your projects: 
- features (for adding new features)
- R & D ( for adding some extra thing to make better application)
- Hot fix ( serious problem)
- bug fix ( for fixing bugs)
.... etc

* How many branches you have created ( at a given time )
1 ,2 or 3
* tell me procedure to fix a bug ?
firstly from bug fix branch , i created one more branch (sub branch) like bug-fix-jira-3456-login-error and work in this branch , once after fixed bug
then i have done PR (pull request) 

(1) To see local branches (on your machine):

 git branch

(2)  To see remote branches (on the remote like GitHub, GitLab, etc.):
 
 git branch -r

(3)  To see all branches (both local and remote):

 git branch -a

(4) To switch to an existing branch:
 
 git switch <branch-name>    / git checkout <branch-name>

(5) To create a new branch and switch to it:

 git switch -c <new-branch-name>  / git checkout -b <new-branch-name>

(6) to create new branch through git :
 
 git branch <branch-name>    / git branch bug-fix-jira-3456-login-error
(7)  by your self created branch , git push will not work instead use this one : git push --set-upstream origin bug-fix-jira-3456-login-error

PULL CONFLICT := when two developers are working on same functionality and there code are not matching on a particular line of code then it's occurs 
                for that while doing pull we need to fix it manually.

* Note:- write same line different code on git hub code and different line in local then 
(8) git add .
(9) git commit -m "first commit"
(10) git pull :- you will see conflict error so manually fix and then repeat above 3 commands then
(11) git push


* Note: if you want to set your origin then : git remote set-url origin https://github.com/mera786/test.git

(12) Undo the commit from remote repository: git revert <commit-id>  / git revert aac5cba

(13) Undo the commit from local repository : 
 soft reset : it will only undo from stagging to unstage but file will be there 
git reset --soft HEAD~1 (for recent commit)

hard reset : it will undo from stagging and also removed file.
git reset --hard HEAD~3

(14) difference between revert and reset :
git revert : 
-> revert adds a new commit.
git reset :
-> reset removes history (risky if pushed).

| Feature                      | `git revert` | `git reset`                 |
| ---------------------------- | ------------ | --------------------------- |
| Safe for shared branches     | ✅ Yes        | ❌ No                        |
| Removes commits from history | ❌ No         | ✅ Yes                       |
| Creates a new commit         | ✅ Yes        | ❌ No (unless `--soft` used) |

REVERT practical :
 Step 1: Create a repo and add some commits:
git init revert-demo
cd revert-demo

echo "line 1" > file.txt
git add .
git commit -m "commit 1"

echo "line 2" >> file.txt
git add .
git commit -m "commit 2"

echo "line 3" >> file.txt
git add .
git commit -m "commit 3"

Step 2: See history :
git log --oneline

 Step 3: Revert commit 2 :
git revert b2f3abc



