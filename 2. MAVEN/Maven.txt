Q1. What is Maven?
A: Maven is a build automation and dependency management tool. It simplifies project builds, versioning, and dependency handling, especially in Spring Boot.
How to set up maven in local system ?

Q2. What is an artifact in Maven?
A: An artifact is the output of a Maven project (like a .jar, .war, or .ear). It’s uniquely identified by groupId, artifactId, version, and packaging.
example : 
    <!-- 1. groupId: Your organization or domain name in reverse -->
    <groupId>com.example</groupId>

    <!-- 2. artifactId: Your project/module name -->
    <artifactId>my-app</artifactId>

    <!-- 3. version: Current version of your project -->
    <version>1.0.0</version>

    <!-- 4. packaging: The type of artifact Maven will create -->
    <packaging>jar</packaging>

Note:- When Maven builds this project :=  my-app-1.0.0.jar


Q3. What are groupId, artifactId, and version, packaging,SNAPSHOT,RELEASE?
groupId → The organization or project name (like a company or namespace).
Example: org.apache.maven

artifactId → The specific project/module name.
Example: maven-core

version → Which version of that project you want.
Example: 3.8.6

packaging → What type of file it is (jar, war, ear, pom, etc.).
Example: jar

SNAPSHOT: This indicates that the project is still under development and is not yet finalized. It’s a work-in-progress version.

RELEASE: This version has been finalized and is ready for production or delivery to clients. It’s stable and no longer changing.


Q4. What is Archetype?
- An archetype in Maven represents a template for generating a project. It’s a way to create a project with a predefined structure. Some common archetypes include:

  a. quick-start: This is a basic template for a simple console application. It usually includes a simple structure with one class to get you started.
  b. web-app: This archetype is used to create a web application project. It sets up the necessary files and structure for a web-based project, often including               directories for WEB-INF, and configurations for servlets, JSPs, etc.


Q5. What is the Maven repository? Types?
Maven Repository is just a directory Whenever you build a project, Maven needs dependencies (libraries). Instead of you manually downloading them, Maven fetches them from repositories
Types :
     a. Local: Stored in your computer (~/.m2/repository).
     b. Central: Public repository provided by Maven (https://repo.maven.apache.org).
     c. Remote/Private: Organization’s own repo (e.g., Nexus, Artifactory).

Q6. What is the pom.xml?
A: Project Object Model file—XML file containing project metadata, dependencies, plugins, and build instructions.

Q7. What is the difference between mvn clean, mvn compile, and mvn install?
- clean: Deletes target/ folder.
- compile: Compiles source code.
- install: Installs JAR into local repo (.m2) for reuse.

Q8. What is the Maven build lifecycle?
- A lifecycle is a sequence of phases that define the steps in building a project.
- Maven has 3 built-in lifecycles:
          a. default → handles project deployment (compile → test → package → install → deploy)
          b. clean → removes previous build output (target/)
          c. site → generates project documentation

Q9. What is called Maven Phase ?
- A phase is a step inside a lifecycle.
- Example (default lifecycle phases): compile → test → package → install → deploy
- Note:- When you run: mvn package    Maven runs all phases up to package (compile and test happen automatically before it).
- To skip the test during packaging we can use the following command :   mvn clean package -DskipTests=true

Q10. What is called Maven Goal ?
- A Maven Goal is the actual work/task that gets executed during a phase.
- Phases are made up of goals.
- Example: 
        a. compile phase calls the compiler:compile goal.
        b. test phase calls surefire:test goal.

Q11. What is the difference between dependencyManagement and dependencies?
- dependencies: Maven Directly brings the library into your project.
- dependencyManagement : Maven does not add it automatically. It only says: “Whenever you add the dependency in child modules, use this version by default.


Q12. What is the difference between transitive dependencies and starter depenecies?
Transitive Dependencies (Maven feature) :
- They happen automatically whenever any dependency you add brings its own dependencies.
- Not designed for convenience, it’s just how Maven works.
- Example: You add Hibernate → it automatically brings in antlr, dom4j, etc.
Starter Dependencies (Spring Boot feature) :
- A special kind of direct dependency created by Spring Boot.
- It’s just a dependencies with a bunch of dependencies listed inside.
- You add it directly, but its purpose is to bundle common libraries together.
- Example: spring-boot-starter-web → inside it declares Spring MVC, Jackson, Tomcat etc.


Q13. How do you exclude a transitive dependency?
A: Using <exclusions> in pom.xml.

Q14. What is the difference between mvn package and mvn install?
- package: Builds JAR/WAR in target/.
- install: Puts JAR/WAR in local repo so other projects can use it.


Q15. How to set up maven in local system ?
Step 1: Install JDK
- Download and install the required version of JDK (e.g., JDK 17).
Step 2: Configure Java Environment Variables
- Set JAVA_HOME → (Exclude bin folder) :  JAVA_HOME = C:\Program Files\Java\jdk-17
- Update PATH variable → (Include bin folder) :  PATH = C:\Program Files\Java\jdk-17\bin
Step 3: Download Maven
- Download the latest stable version (e.g., apache-maven-3.9.9). and Unzip it to a directory (e.g., C:\apache-maven-3.9.9).
Step 4: Configure Maven Environment Variables
- Set MAVEN_HOME → (Exclude bin folder) :   MAVEN_HOME = C:\apache-maven-3.9.9
- Update PATH variable → (Include bin folder)  :    PATH = C:\apache-maven-3.9.9\bin
Step 5: Verify Maven Installation 
- Open Command Prompt and run:  mvn -version


