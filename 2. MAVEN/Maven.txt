Q1. What is Maven?
A: Maven is a build automation and dependency management tool. It simplifies project builds, versioning, and dependency handling, especially in Spring Boot.
How to set up maven in local system ?

Q2. What is an artifact in Maven?
A: An artifact is the output of a Maven project (like a .jar, .war, or .ear). It’s uniquely identified by groupId, artifactId, version, and packaging.
example : 
    <!-- 1. groupId: Your organization or domain name in reverse -->
    <groupId>com.example</groupId>

    <!-- 2. artifactId: Your project/module name -->
    <artifactId>my-app</artifactId>

    <!-- 3. version: Current version of your project -->
    <version>1.0.0</version>

    <!-- 4. packaging: The type of artifact Maven will create -->
    <packaging>jar</packaging>

Note:- When Maven builds this project :=  my-app-1.0.0.jar


Q3. What are groupId, artifactId, and version, packaging,SNAPSHOT,RELEASE?
groupId → The organization or project name (like a company or namespace).
Example: org.apache.maven

artifactId → The specific project/module name.
Example: maven-core

version → Which version of that project you want.
Example: 3.8.6

packaging → What type of file it is (jar, war, ear, pom, etc.).
Example: jar

SNAPSHOT: This indicates that the project is still under development and is not yet finalized. It’s a work-in-progress version.

RELEASE: This version has been finalized and is ready for production or delivery to clients. It’s stable and no longer changing.


Q4. What is Archetype?
- An archetype in Maven represents a template for generating a project. It’s a way to create a project with a predefined structure. Some common archetypes include:

  a. quick-start: This is a basic template for a simple console application. It usually includes a simple structure with one class to get you started.
  b. web-app: This archetype is used to create a web application project. It sets up the necessary files and structure for a web-based project, often including               directories for WEB-INF, and configurations for servlets, JSPs, etc.


Q5. What is the Maven repository? Types?
Maven Repository is just a directory Whenever you build a project, Maven needs dependencies (libraries). Instead of you manually downloading them, Maven fetches them from repositories
Types :
     a. Local: Stored in your computer (~/.m2/repository).
     b. Central: Public repository provided by Maven (https://repo.maven.apache.org).
     c. Remote/Private: Organization’s own repo (e.g., Nexus, Artifactory).



Step 1:  Download and install Required version of JDK

Step 2:  Setup JAVA_HOME(Excluding bin folder) and Java Path (Including bin folder path)
	
	JAVA_HOME=C:\Program Files\Java\jdk-17
	path=C:\Program Files\Java\jdk-17\bin

Step 4:  Download Maven and unzip the files

4) Setup MAVEN_HOME(Excluding bin folder) and Maven Path (Including bin folder path)

	MAVEN_HOME = C:\apache-maven-3.9.9
	path=C:\apache-maven-3.9.9\bin
	
5)  Verify Maven setup by using following command in command prompt	

	  $ mvn -version

Important Note About Maven:







What are Maven Goals?
Maven defines specific tasks (called goals) that you can run to execute the build lifecycle of your project. Common goals are used to build, test, package, and clean your project. They can be executed manually or as part of the build process.

1. clean: Deletes the target directory and any compiled .class files from previous builds. This ensures that you start with a fresh build.

2. compile: Converts all the Java source files (.java) in your project into bytecode (.class) files that can be executed by the JVM.

3. test: Runs unit tests using a testing framework like JUnit to ensure your code works correctly.

4. package: Packages the compiled code into an artifact, usually a .jar (Java Archive) or .war (Web Archive) file, which can be deployed or shared. This is typically the step before deployment to an environment (QA, UAT, DEV, PROD).



To skip the test during packaging we can use the following command
 - mvn clean package -DskipTests=true

What is Dependency Exclusion?

- Dependency Exclusion in Maven is a mechanism that allows you to remove unwanted transitive dependencies that are being pulled into your project. These transitive dependencies are usually automatically included when you add a library (dependency) to your project. However, sometimes you might not need all of them.

- By excluding unnecessary dependencies, you can reduce the size of your project and avoid conflicts with other dependencies.

Breakdown:
The Parent Dependency:

-spring-context is added as a direct dependency in your project.
- When you add this dependency, Maven automatically resolves its transitive dependencies like spring-core, spring-beans, spring-aop, spring-expression, and spring-jcl.
Transitive Dependencies:
- These are transitive dependencies because they are required by spring-context, and Maven resolves them automatically.
Excluding a Transitive Dependency (spring-aop):
- Sometimes, you might not need all of these transitive dependencies. In this case, you might not want to include spring-aop in your project.
- The <exclusions> tag is used to exclude spring-aop.
- This ensures that when you include spring-context, Maven will not include the spring-aop dependency in your project, even though it's a transitive dependency of spring-context.

Advantage
- Reduced Project Size
- Improved Build time

Without exclusion

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>6.2.0</version>
</dependency>

With exclusion

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>6.2.0</version>
    <exclusions>
        <exclusion>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </exclusion>
    </exclusions>
</dependency>


Note:
These Spring Boot starter dependencies are a special type of dependency provided by Spring Boot that bundle several related dependencies together for convenience.

(5) What is the difference between transitive dependencies and starter depenecies?
Transitive dependencies are associated with each other . 
however spring boot starter dependencies are a special type of dependency provided by spring boot 
that a bundle several related dependencies together for convenience.





